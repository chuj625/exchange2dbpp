/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IDManager_thrift_H
#define IDManager_thrift_H

#include <thrift/TDispatchProcessor.h>
#include "IDManager_thrift_types.h"



class IDManager_thriftIf {
 public:
  virtual ~IDManager_thriftIf() {}
  virtual void ping() = 0;
  virtual void getid(std::string& _return, const std::string& cla, const std::string& msg) = 0;
  virtual void getallid(std::vector<std::string> & _return, const std::string& cla) = 0;
};

class IDManager_thriftIfFactory {
 public:
  typedef IDManager_thriftIf Handler;

  virtual ~IDManager_thriftIfFactory() {}

  virtual IDManager_thriftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IDManager_thriftIf* /* handler */) = 0;
};

class IDManager_thriftIfSingletonFactory : virtual public IDManager_thriftIfFactory {
 public:
  IDManager_thriftIfSingletonFactory(const boost::shared_ptr<IDManager_thriftIf>& iface) : iface_(iface) {}
  virtual ~IDManager_thriftIfSingletonFactory() {}

  virtual IDManager_thriftIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IDManager_thriftIf* /* handler */) {}

 protected:
  boost::shared_ptr<IDManager_thriftIf> iface_;
};

class IDManager_thriftNull : virtual public IDManager_thriftIf {
 public:
  virtual ~IDManager_thriftNull() {}
  void ping() {
    return;
  }
  void getid(std::string& /* _return */, const std::string& /* cla */, const std::string& /* msg */) {
    return;
  }
  void getallid(std::vector<std::string> & /* _return */, const std::string& /* cla */) {
    return;
  }
};


class IDManager_thrift_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  IDManager_thrift_ping_args(const IDManager_thrift_ping_args&);
  IDManager_thrift_ping_args& operator=(const IDManager_thrift_ping_args&);
  IDManager_thrift_ping_args() {
  }

  virtual ~IDManager_thrift_ping_args() throw();

  bool operator == (const IDManager_thrift_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IDManager_thrift_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDManager_thrift_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_ping_args& obj);
};


class IDManager_thrift_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~IDManager_thrift_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_ping_pargs& obj);
};


class IDManager_thrift_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  IDManager_thrift_ping_result(const IDManager_thrift_ping_result&);
  IDManager_thrift_ping_result& operator=(const IDManager_thrift_ping_result&);
  IDManager_thrift_ping_result() {
  }

  virtual ~IDManager_thrift_ping_result() throw();

  bool operator == (const IDManager_thrift_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IDManager_thrift_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDManager_thrift_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_ping_result& obj);
};


class IDManager_thrift_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~IDManager_thrift_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_ping_presult& obj);
};

typedef struct _IDManager_thrift_getid_args__isset {
  _IDManager_thrift_getid_args__isset() : cla(false), msg(false) {}
  bool cla :1;
  bool msg :1;
} _IDManager_thrift_getid_args__isset;

class IDManager_thrift_getid_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  IDManager_thrift_getid_args(const IDManager_thrift_getid_args&);
  IDManager_thrift_getid_args& operator=(const IDManager_thrift_getid_args&);
  IDManager_thrift_getid_args() : cla(), msg() {
  }

  virtual ~IDManager_thrift_getid_args() throw();
  std::string cla;
  std::string msg;

  _IDManager_thrift_getid_args__isset __isset;

  void __set_cla(const std::string& val);

  void __set_msg(const std::string& val);

  bool operator == (const IDManager_thrift_getid_args & rhs) const
  {
    if (!(cla == rhs.cla))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const IDManager_thrift_getid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDManager_thrift_getid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getid_args& obj);
};


class IDManager_thrift_getid_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~IDManager_thrift_getid_pargs() throw();
  const std::string* cla;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getid_pargs& obj);
};

typedef struct _IDManager_thrift_getid_result__isset {
  _IDManager_thrift_getid_result__isset() : success(false) {}
  bool success :1;
} _IDManager_thrift_getid_result__isset;

class IDManager_thrift_getid_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  IDManager_thrift_getid_result(const IDManager_thrift_getid_result&);
  IDManager_thrift_getid_result& operator=(const IDManager_thrift_getid_result&);
  IDManager_thrift_getid_result() : success() {
  }

  virtual ~IDManager_thrift_getid_result() throw();
  std::string success;

  _IDManager_thrift_getid_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const IDManager_thrift_getid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IDManager_thrift_getid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDManager_thrift_getid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getid_result& obj);
};

typedef struct _IDManager_thrift_getid_presult__isset {
  _IDManager_thrift_getid_presult__isset() : success(false) {}
  bool success :1;
} _IDManager_thrift_getid_presult__isset;

class IDManager_thrift_getid_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~IDManager_thrift_getid_presult() throw();
  std::string* success;

  _IDManager_thrift_getid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getid_presult& obj);
};

typedef struct _IDManager_thrift_getallid_args__isset {
  _IDManager_thrift_getallid_args__isset() : cla(false) {}
  bool cla :1;
} _IDManager_thrift_getallid_args__isset;

class IDManager_thrift_getallid_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  IDManager_thrift_getallid_args(const IDManager_thrift_getallid_args&);
  IDManager_thrift_getallid_args& operator=(const IDManager_thrift_getallid_args&);
  IDManager_thrift_getallid_args() : cla() {
  }

  virtual ~IDManager_thrift_getallid_args() throw();
  std::string cla;

  _IDManager_thrift_getallid_args__isset __isset;

  void __set_cla(const std::string& val);

  bool operator == (const IDManager_thrift_getallid_args & rhs) const
  {
    if (!(cla == rhs.cla))
      return false;
    return true;
  }
  bool operator != (const IDManager_thrift_getallid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDManager_thrift_getallid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getallid_args& obj);
};


class IDManager_thrift_getallid_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~IDManager_thrift_getallid_pargs() throw();
  const std::string* cla;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getallid_pargs& obj);
};

typedef struct _IDManager_thrift_getallid_result__isset {
  _IDManager_thrift_getallid_result__isset() : success(false) {}
  bool success :1;
} _IDManager_thrift_getallid_result__isset;

class IDManager_thrift_getallid_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  IDManager_thrift_getallid_result(const IDManager_thrift_getallid_result&);
  IDManager_thrift_getallid_result& operator=(const IDManager_thrift_getallid_result&);
  IDManager_thrift_getallid_result() {
  }

  virtual ~IDManager_thrift_getallid_result() throw();
  std::vector<std::string>  success;

  _IDManager_thrift_getallid_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const IDManager_thrift_getallid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IDManager_thrift_getallid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IDManager_thrift_getallid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getallid_result& obj);
};

typedef struct _IDManager_thrift_getallid_presult__isset {
  _IDManager_thrift_getallid_presult__isset() : success(false) {}
  bool success :1;
} _IDManager_thrift_getallid_presult__isset;

class IDManager_thrift_getallid_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~IDManager_thrift_getallid_presult() throw();
  std::vector<std::string> * success;

  _IDManager_thrift_getallid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const IDManager_thrift_getallid_presult& obj);
};

class IDManager_thriftClient : virtual public IDManager_thriftIf {
 public:
  IDManager_thriftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IDManager_thriftClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void getid(std::string& _return, const std::string& cla, const std::string& msg);
  void send_getid(const std::string& cla, const std::string& msg);
  void recv_getid(std::string& _return);
  void getallid(std::vector<std::string> & _return, const std::string& cla);
  void send_getallid(const std::string& cla);
  void recv_getallid(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IDManager_thriftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<IDManager_thriftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IDManager_thriftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getallid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IDManager_thriftProcessor(boost::shared_ptr<IDManager_thriftIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &IDManager_thriftProcessor::process_ping;
    processMap_["getid"] = &IDManager_thriftProcessor::process_getid;
    processMap_["getallid"] = &IDManager_thriftProcessor::process_getallid;
  }

  virtual ~IDManager_thriftProcessor() {}
};

class IDManager_thriftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IDManager_thriftProcessorFactory(const ::boost::shared_ptr< IDManager_thriftIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< IDManager_thriftIfFactory > handlerFactory_;
};

class IDManager_thriftMultiface : virtual public IDManager_thriftIf {
 public:
  IDManager_thriftMultiface(std::vector<boost::shared_ptr<IDManager_thriftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IDManager_thriftMultiface() {}
 protected:
  std::vector<boost::shared_ptr<IDManager_thriftIf> > ifaces_;
  IDManager_thriftMultiface() {}
  void add(boost::shared_ptr<IDManager_thriftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void getid(std::string& _return, const std::string& cla, const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getid(_return, cla, msg);
    }
    ifaces_[i]->getid(_return, cla, msg);
    return;
  }

  void getallid(std::vector<std::string> & _return, const std::string& cla) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getallid(_return, cla);
    }
    ifaces_[i]->getallid(_return, cla);
    return;
  }

};



#endif
